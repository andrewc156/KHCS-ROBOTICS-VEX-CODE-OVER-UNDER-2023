#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
controller_1 = Controller(PRIMARY)
wings = DigitalOut(brain.three_wire_port.g)
left_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_6_1, True)
left_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_6_1, True)
left_drive_smart = MotorGroup(left_motor_a, left_motor_b)
right_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_6_1, False)
right_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_6_1, False)
right_drive_smart = MotorGroup(right_motor_a, right_motor_b)
drivetrain = DriveTrain(left_drive_smart, right_drive_smart, 219.44, 295, 40, MM, 0.6)
flywheel = Motor(Ports.PORT6, GearSetting.RATIO_6_1, False)
intake = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)
auton_selector = Rotation(Ports.PORT15, False)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")



# define variables used for controlling motors based on controller inputs
drivetrain_l_needs_to_be_stopped_controller_1 = False
drivetrain_r_needs_to_be_stopped_controller_1 = False

# define a task that will handle monitoring inputs from controller_1
def rc_auto_loop_function_controller_1():
    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled
    # process the controller input every 20 milliseconds
    # update the motors based on the input values
    while True:
        if remote_control_code_enabled:
            
            # calculate the drivetrain motor velocities from the controller joystick axies
            # left = axis3 + axis1
            # right = axis3 - axis1
            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()
            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()
            
            # check if the value is inside of the deadband range
            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:
                # check if the left motor has already been stopped
                if drivetrain_l_needs_to_be_stopped_controller_1:
                    # stop the left drive motor
                    left_drive_smart.stop()
                    # tell the code that the left motor has been stopped
                    drivetrain_l_needs_to_be_stopped_controller_1 = False
            else:
                # reset the toggle so that the deadband code knows to stop the left motor next
                # time the input is in the deadband range
                drivetrain_l_needs_to_be_stopped_controller_1 = True
            # check if the value is inside of the deadband range
            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:
                # check if the right motor has already been stopped
                if drivetrain_r_needs_to_be_stopped_controller_1:
                    # stop the right drive motor
                    right_drive_smart.stop()
                    # tell the code that the right motor has been stopped
                    drivetrain_r_needs_to_be_stopped_controller_1 = False
            else:
                # reset the toggle so that the deadband code knows to stop the right motor next
                # time the input is in the deadband range
                drivetrain_r_needs_to_be_stopped_controller_1 = True
            
            # only tell the left drive motor to spin if the values are not in the deadband range
            if drivetrain_l_needs_to_be_stopped_controller_1:
                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)
                left_drive_smart.spin(FORWARD)
            # only tell the right drive motor to spin if the values are not in the deadband range
            if drivetrain_r_needs_to_be_stopped_controller_1:
                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)
                right_drive_smart.spin(FORWARD)
        # wait before repeating the process
        wait(20, MSEC)

# define variable for remote controller enable/disable
remote_control_code_enabled = True

rc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)

#endregion VEXcode Generated Robot Configuration

# Library imports
from vex import *
wait(3,SECONDS)
drivetrain.set_stopping(BRAKE)



def wings_out():
    wings.set(False)

def wings_in():
    wings.set(True)

def pre_autonomous():
    # actions to do when the program starts
    auton_selector.set_position(180,DEGREES)
    wings.set(False)
    wings_in()
    controller_1.screen.clear_screen()
    controller_1.screen.print("pre-auton code")
    brain.screen.print("pre-auton code")
    controller_1.rumble("-... -.-")
    wait(1, SECONDS)
    while True:
        wait(20, MSEC)
        if auton_selector.angle()>130:
            controller_1.screen.set_cursor(3, 3)
            controller_1.screen.print("Offensive Auton")
            brain.screen.clear_screen()
            controller_1.screen.clear_screen()
        else:
            controller_1.screen.set_cursor(3, 3)
            controller_1.screen.print("Defensive Auton")
            brain.screen.clear_screen()
            controller_1.screen.clear_screen()

    
            







#autonoumous period code
def autonomous():
    drivetrain.set_stopping(HOLD)
    intake.set_velocity(1000,PERCENT)
    drivetrain.set_drive_velocity(80,PERCENT)
    drivetrain.set_turn_velocity(40,PERCENT)
    if auton_selector.angle()>130:
        intake.spin(FORWARD)
        drivetrain.drive_for(FORWARD,36,INCHES)
        drivetrain.turn_for(RIGHT,45,DEGREES)
        intake.spin(REVERSE)
        drivetrain.drive_for(REVERSE,10,INCHES)
        drivetrain.turn_for(LEFT,30,DEGREES)
        intake.spin(FORWARD)
        drivetrain.drive_for(FORWARD,5,INCHES)
        
        
        

        
    else:
        drivetrain.drive_for(FORWARD,60,INCHES,wait=False)
        wait(5,SECONDS)
        drivetrain.drive_for(REVERSE,20,INCHES)
    
    


    



def brak():
    drivetrain.set_stopping(BRAKE)
    drivetrain.set_drive_velocity(0,PERCENT)

def no_brak():
    drivetrain.set_stopping(COAST)



        


#code for user control period
def user_control():
    
    global integral, previous_error, target_flywheel_speed
        # PID constants
    kP = 2.5
    kI = 0.005
    kD = 0

    # PID variables
    integral = 0
    previous_error = 0
    target_flywheel_speed = 400  

    
    speed_readings = []
    max_readings = 100


    def update_speed_readings(new_reading):
        if len(speed_readings) >= max_readings:
            speed_readings.pop(0)
        speed_readings.append(new_reading)


    def calculate_running_average():
        if speed_readings:
            return sum(speed_readings) / len(speed_readings)
        else:
            return 0


    def pid_controller(target_speed, current_speed, kP, kI, kD, integral, previous_error):
        error = target_speed - current_speed
        integral = integral + error
        derivative = error - previous_error
        output = (kP * error) + (kI * integral) + (kD * derivative)
        previous_error = error
        return output, integral, previous_error


    drivetrain.set_stopping(COAST)
    brain.screen.clear_screen()
    brain.screen.set_cursor(3, 3)
    brain.screen.print("driver control code")
    #flywheel.set_velocity(75,PERCENT)

    flywheel.set_max_torque(100000,PERCENT)
    intake.set_max_torque(1000,PERCENT)
    flywheel.set_stopping(COAST)
    intake.set_velocity(100,PERCENT)
    while True:
        wait(20, MSEC)
        #code for the flywheel
        if (controller_1.buttonRight.pressing()):
            current_speed = flywheel.velocity(RPM)  
            pid_output, integral, previous_error = pid_controller(target_flywheel_speed, current_speed, kP, kI, kD, integral, previous_error)
            flywheel.set_velocity(pid_output, PERCENT)
            flywheel.spin(FORWARD)
        
            #print(flywheel.velocity(RPM))
            current_speed = flywheel.velocity(RPM)
            update_speed_readings(current_speed)
            average_speed = calculate_running_average()
            print(average_speed)
            
        #kill mode lol
        elif (controller_1.buttonUp.pressing()):
            flywheel.set_velocity(1000000,PERCENT)
            flywheel.spin(FORWARD)
        else:
            flywheel.stop()
        #code for the intake
        if controller_1.buttonR2.pressing():
            intake.spin(FORWARD)
        elif controller_1.buttonL2.pressing():
            intake.spin(REVERSE)
        else:
            intake.stop()
        if controller_1.buttonX.pressing():
            wings_in()
        elif controller_1.buttonY.pressing():
            wings_out()

        
            

        
            

        

    
            


comp = Competition(user_control, autonomous)
pre_autonomous()
