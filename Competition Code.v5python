#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
controller_1 = Controller(PRIMARY)
arm = DigitalOut(brain.three_wire_port.h)
left_wing = DigitalOut(brain.three_wire_port.g)
up_arm = Motor(Ports.PORT19, GearSetting.RATIO_36_1, True)
left_motor_a = Motor(Ports.PORT7, GearSetting.RATIO_6_1, True)
left_motor_b = Motor(Ports.PORT8, GearSetting.RATIO_6_1, True)
left_drive_smart = MotorGroup(left_motor_a, left_motor_b)
right_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_6_1, False)
right_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)
right_drive_smart = MotorGroup(right_motor_a, right_motor_b)
drivetrain_inertial = Inertial(Ports.PORT13)
drivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 0.6)
Cata_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_36_1, False)
Cata_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_36_1, True)
Cata = MotorGroup(Cata_motor_a, Cata_motor_b)
flywheel = Motor(Ports.PORT6, GearSetting.RATIO_6_1, False)


# wait for rotation sensor to fully initialize
wait(30, MSEC)

def calibrate_drivetrain():
    # Calibrate the Drivetrain Inertial
    sleep(200, MSEC)
    brain.screen.print("Calibrating")
    brain.screen.next_row()
    brain.screen.print("Inertial")
    drivetrain_inertial.calibrate()
    while drivetrain_inertial.is_calibrating():
        sleep(25, MSEC)
    brain.screen.clear_screen()
    brain.screen.set_cursor(1, 1)


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")



# define variables used for controlling motors based on controller inputs
drivetrain_l_needs_to_be_stopped_controller_1 = False
drivetrain_r_needs_to_be_stopped_controller_1 = False

# define a task that will handle monitoring inputs from controller_1
def rc_auto_loop_function_controller_1():
    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled
    # process the controller input every 20 milliseconds
    # update the motors based on the input values
    while True:
        if remote_control_code_enabled:
            # stop the motors if the brain is calibrating
            if drivetrain_inertial.is_calibrating():
                left_drive_smart.stop()
                right_drive_smart.stop()
                while drivetrain_inertial.is_calibrating():
                    sleep(25, MSEC)
            
            # calculate the drivetrain motor velocities from the controller joystick axies
            # left = axis3 + axis1
            # right = axis3 - axis1
            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()
            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()
            
            # check if the value is inside of the deadband range
            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:
                # check if the left motor has already been stopped
                if drivetrain_l_needs_to_be_stopped_controller_1:
                    # stop the left drive motor
                    left_drive_smart.stop()
                    # tell the code that the left motor has been stopped
                    drivetrain_l_needs_to_be_stopped_controller_1 = False
            else:
                # reset the toggle so that the deadband code knows to stop the left motor next
                # time the input is in the deadband range
                drivetrain_l_needs_to_be_stopped_controller_1 = True
            # check if the value is inside of the deadband range
            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:
                # check if the right motor has already been stopped
                if drivetrain_r_needs_to_be_stopped_controller_1:
                    # stop the right drive motor
                    right_drive_smart.stop()
                    # tell the code that the right motor has been stopped
                    drivetrain_r_needs_to_be_stopped_controller_1 = False
            else:
                # reset the toggle so that the deadband code knows to stop the right motor next
                # time the input is in the deadband range
                drivetrain_r_needs_to_be_stopped_controller_1 = True
            
            # only tell the left drive motor to spin if the values are not in the deadband range
            if drivetrain_l_needs_to_be_stopped_controller_1:
                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)
                left_drive_smart.spin(FORWARD)
            # only tell the right drive motor to spin if the values are not in the deadband range
            if drivetrain_r_needs_to_be_stopped_controller_1:
                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)
                right_drive_smart.spin(FORWARD)
        # wait before repeating the process
        wait(20, MSEC)

# define variable for remote controller enable/disable
remote_control_code_enabled = True

rc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)

#endregion VEXcode Generated Robot Configuration

# Library imports
from vex import *
wait(3,SECONDS)
up_arm.set_stopping(HOLD)
drivetrain.set_stopping(BRAKE)


def shot():
    Cata.spin_for(FORWARD,360,DEGREES,wait=False)

def wings_out():
    left_wing.set(True)

def wings_in():
    left_wing.set(False)

def pre_autonomous():
    # actions to do when the program starts
    arm.set(False)
    left_wing.set(False)
    wings_in()
    brain.screen.clear_screen()
    controller_1.screen.clear_screen()
    controller_1.screen.print("pre-auton code")
    brain.screen.print("pre-auton code")
    controller_1.rumble("-... -.-")
    wait(1, SECONDS)






#autonoumous period code
def autonomous():
     wait(0.1,SECONDS)
    # arm.set(False)
    # brain.screen.clear_screen()
    # brain.screen.print("autonomous code")
    # up_arm.set_velocity(100,PERCENT)
    # up_arm.spin_for(FORWARD,90,DEGREES,wait=False)
    # wait(0.1,SECONDS)
    # drivetrain.set_drive_velocity(80,PERCENT)
    # drivetrain.drive_for(FORWARD,44,INCHES,wait=False)
    # wait(2.5,SECONDS)
    # drivetrain.drive_for(REVERSE,25,INCHES)
    # drivetrain.turn_for(LEFT,67,DEGREES)
    # drivetrain.drive_for(FORWARD,28,INCHES,wait=False)
    # arm.set(True)
    # drivetrain.turn_for(RIGHT,67,DEGREES)
    # drivetrain.drive_for(FORWARD,24,INCHES,wait=False)
    # drivetrain.turn_for(RIGHT,90,DEGREES)
    # drivetrain.drive_for(FORWARD,30,INCHES,wait=False)
    # wait(1,SECONDS)
    # drivetrain.drive_for(REVERSE,30,INCHES,wait=False)
    
    
    


    







        


#code for user control period
def user_control():
    up_arm.set_velocity(20,PERCENT)
    up_arm.set_stopping(BRAKE)
    brain.screen.clear_screen()
    controller_1.screen.print("driver control code")
    up_arm.set_velocity(100, PERCENT)
    flywheel.set_velocity(0,PERCENT)
    flywheel.set_max_torque(100000,PERCENT)
    flywheel.set_stopping(COAST)
    while True:
        wait(20, MSEC)
        #code to open and close the arm
        if controller_1.buttonA.pressing():
            arm.set(True)
        elif controller_1.buttonB.pressing():
            arm.set(False)
        if controller_1.buttonX.pressing():
            wings_out()
        elif controller_1.buttonY.pressing():
            wings_in()
        if (controller_1.buttonUp.pressing()):
            up_arm.spin(REVERSE)
        elif (controller_1.buttonDown.pressing()):
            up_arm.spin(FORWARD)
        else:
            up_arm.stop()

        if (controller_1.buttonR1.pressing()):
            Cata.spin(FORWARD)
            Cata.set_velocity(75,PERCENT)
        else:
            Cata.stop
            Cata.set_velocity(0,PERCENT)
        if (controller_1.buttonRight.pressing()):
            flywheel.set_velocity(1000000000,PERCENT)
            flywheel.spin(FORWARD)
        else:
            flywheel.stop()

        

    
            

# create competition instance
comp = Competition(user_control, autonomous)
pre_autonomous()
